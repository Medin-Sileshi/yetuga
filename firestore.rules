rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function hasRequiredFields() {
      let data = request.resource.data;

      // Common required fields for all account types
      let hasCommonFields = data.accountType is string
        && data.displayName is string
        && data.username is string
        && data.phoneNumber is string
        && data.profileImageUrl is string
        && data.onboardingCompleted is bool;

      // Check account type specific fields
      let isBusinessAccount = data.accountType == 'business';

      // Business account specific fields
      let hasBusinessFields = isBusinessAccount
        && data.establishedDate is timestamp
        && data.businessTypes is list;

      // Personal account specific fields
      let hasPersonalFields = !isBusinessAccount
        && data.birthday is timestamp
        && data.interests is list;

      return hasCommonFields && (hasBusinessFields || hasPersonalFields);
    }

    function isValidUsername() {
      let username = request.resource.data.username;
      return username.size() >= 2
        && username.size() <= 15
        && username.matches('^[a-z0-9_]+$');  // Updated to allow underscores
    }

    function isUniqueUsername() {
      let username = request.resource.data.username;
      return !exists(/databases/$(database)/documents/users/$(request.auth.uid))
        || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == username;
    }

    // Users collection
    match /users/{userId} {
      // Allow reading own document
      allow read: if isAuthenticated() && isOwner(userId);

      // Allow querying for username availability - simplified rule
      allow list: if isAuthenticated();

      allow create: if isAuthenticated()
        && isOwner(userId)
        && hasRequiredFields()
        && isValidUsername()
        && isUniqueUsername();
      allow update: if isAuthenticated()
        && isOwner(userId)
        && hasRequiredFields()
        && isValidUsername()
        && isUniqueUsername();
      allow delete: if false;  // Prevent user deletion through client
    }

    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
